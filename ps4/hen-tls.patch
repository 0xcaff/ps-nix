Index: kpayload/source/offsets/505.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kpayload/source/offsets/505.c b/kpayload/source/offsets/505.c
--- a/kpayload/source/offsets/505.c	(revision 8852b94cd3896f8a876dff1c980349ae737f625a)
+++ b/kpayload/source/offsets/505.c	(date 1751955549115)
@@ -62,6 +62,9 @@
   .vm_map_lookup_entry_addr        = 0x0019F760,
   .proc_rwmem_addr                 = 0x0030D150,

+  // Thread local storage patch
+  .scan_phdr_addr                  = 0x00193000,
+
   // Fself hooks
   .sceSblAuthMgrIsLoadable__sceSblACMgrGetPathId_hook        = 0x0063E25D,
   .sceSblAuthMgrIsLoadable2_hook                             = 0x0063E3A1,
Index: kpayload/include/offsets.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kpayload/include/offsets.h b/kpayload/include/offsets.h
--- a/kpayload/include/offsets.h	(revision 8852b94cd3896f8a876dff1c980349ae737f625a)
+++ b/kpayload/include/offsets.h	(date 1751989551500)
@@ -69,6 +69,10 @@
   uint32_t vm_map_lookup_entry_addr;
   uint32_t proc_rwmem_addr;

+  // Thread local storage patch
+  uint32_t scan_phdr_addr;
+  uint32_t exec_self_imgact_scan_phdr_addr_hook;
+
   // Fself hooks
   uint32_t sceSblAuthMgrIsLoadable__sceSblACMgrGetPathId_hook;
   uint32_t sceSblAuthMgrIsLoadable2_hook;
Index: kpayload/source/offsets/900.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kpayload/source/offsets/900.c b/kpayload/source/offsets/900.c
--- a/kpayload/source/offsets/900.c	(revision 8852b94cd3896f8a876dff1c980349ae737f625a)
+++ b/kpayload/source/offsets/900.c	(date 1751991072803)
@@ -62,6 +62,10 @@
   .vm_map_lookup_entry_addr        = 0x0007C1C0,
   .proc_rwmem_addr                 = 0x0041EB00,

+  // Thread local storage patch
+  .scan_phdr_addr                  = 0x0005D900,
+  .exec_self_imgact_scan_phdr_addr_hook = 0x0005F5A0,
+
   // Fself hooks
   .sceSblAuthMgrIsLoadable__sceSblACMgrGetPathId_hook        = 0x0064473C,
   .sceSblAuthMgrIsLoadable2_hook                             = 0x0064488E,
Index: kpayload/source/offsets/672.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kpayload/source/offsets/672.c b/kpayload/source/offsets/672.c
--- a/kpayload/source/offsets/672.c	(revision 8852b94cd3896f8a876dff1c980349ae737f625a)
+++ b/kpayload/source/offsets/672.c	(date 1751955549126)
@@ -62,6 +62,9 @@
   .vm_map_lookup_entry_addr        = 0x0044D330,
   .proc_rwmem_addr                 = 0x0010EE10,

+  // Thread local storage patch
+  .scan_phdr_addr                  = 0x003CCD90,
+
   // Fself hooks
   .sceSblAuthMgrIsLoadable__sceSblACMgrGetPathId_hook        = 0x006591BC,
   .sceSblAuthMgrIsLoadable2_hook                             = 0x0065930F,
Index: kpayload/include/freebsd_helper.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kpayload/include/freebsd_helper.h b/kpayload/include/freebsd_helper.h
--- a/kpayload/include/freebsd_helper.h	(revision 8852b94cd3896f8a876dff1c980349ae737f625a)
+++ b/kpayload/include/freebsd_helper.h	(date 1751958175803)
@@ -170,4 +170,76 @@
 // TYPE_FIELD(char path[64], 0x474); // 6.50+ (TODO: Confirm it hasn't changed since 6.50)
 TYPE_END();

+typedef	unsigned char	u_char;
+typedef u_char vm_prot_t;	/* protection codes */
+
+// From https://github.com/kiwidoggie/mira-vnext/blob/413d4fd1994e2ca25989b9b661f7bf1fab92407a/external/freebsd-headers/include/sys/imgact.h#L54C1-L120C3
+struct image_params {
+    void *proc;	/* our process struct */
+    void *execlabel;	/* optional exec label */
+    void *vp;	/* pointer to vnode of file to exec */
+    void *object;	/* The vm object for this vp */
+    void *attr;	/* attributes of file */
+    void *image_header; /* head of file to exec */
+    unsigned long entry_addr; /* entry address of target executable */
+    unsigned long reloc_base; /* load address of image */
+    char vmspace_destroyed;	/* flag - we've blown away original vm space */
+    char interpreted;	/* flag - this executable is interpreted */
+    char opened;		/* flag - we have opened executable vnode */
+    char *interpreter_name;	/* name of the interpreter */
+    void *auxargs;		/* ELF Auxinfo structure pointer */
+    void *firstpage;	/* first page that we mapped */
+    unsigned long ps_strings; /* PS_STRINGS for BSD/OS binaries */
+    size_t auxarg_size;
+    void *args;	/* system call arguments */
+    void *sysent;	/* system entry vector */
+    char *execpath;
+    unsigned long execpathp;
+    char *freepath;
+    unsigned long canary;
+    int canarylen;
+    unsigned long pagesizes;
+    int pagesizeslen;
+    vm_prot_t stack_prot;
+
+    // PlayStation 4 Specific (Credits: ChendoChap)
+    uint64_t dynamic_addr;
+    uint64_t tls_mem_size;
+    uint64_t tls_align;
+    uint64_t tls_file_size;
+    uint64_t tls_addr;
+    uint64_t gnu_eh_frame_addr;
+    uint64_t gnu_eh_frame_mem_size;
+    uint8_t unkF0[0x88];
+    //SelfAuthInfo unkF0; //sce custom section of ucred
+    uint64_t unk178;
+    uint64_t sce_procparam_addr;
+    uint64_t sce_procparam_file_size;
+    uint64_t sce_moduleparam_addr;
+    uint64_t sce_moduleparam_file_size;
+
+    uint32_t dynamic_phdr_index;
+    uint64_t dynamic_file_offset;
+    uint64_t dynamic_file_size;
+
+    uint32_t sce_dynlibdata_phdr_index;
+    uint64_t sce_dynlibdata_file_offset;
+    uint64_t sce_dynlibdata_file_size;
+    uint32_t sce_comment_phdr_index;
+    uint64_t sce_comment_file_offset;
+    uint64_t sce_comment_file_size;
+    void* self_pager;
+    char* execpath2;
+    uint64_t load_start_address; //PT_LOAD min?
+    uint64_t load_end_address;  //PT_LOAD max?
+    uint32_t has_dynamic; //unsure if right term, set to 1 when it find PT_DYNAMIC
+    uint32_t unk20C;
+    uint32_t unk210;
+    uint64_t sce_relro_addr;
+    uint64_t sce_relro_size;
+    uint32_t budget_ptype;
+    uint16_t elf_type; //22C like the elf header type
+    //2 bytes implicit padding?
+};
+
 #endif
Index: kpayload/source/offsets/1100.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kpayload/source/offsets/1100.c b/kpayload/source/offsets/1100.c
--- a/kpayload/source/offsets/1100.c	(revision 8852b94cd3896f8a876dff1c980349ae737f625a)
+++ b/kpayload/source/offsets/1100.c	(date 1751991072806)
@@ -62,6 +62,10 @@
   .vm_map_lookup_entry_addr        = 0x00357EF0,
   .proc_rwmem_addr                 = 0x003838A0,

+  // Thread local storage patch
+  .scan_phdr_addr                  = 0x003AF280,
+  .exec_self_imgact_scan_phdr_addr_hook = 0x003B0F20,
+
   // Fself hooks
   .sceSblAuthMgrIsLoadable__sceSblACMgrGetPathId_hook        = 0x0063D13C,
   .sceSblAuthMgrIsLoadable2_hook                             = 0x0063D28E,
Index: kpayload/source/main.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/kpayload/source/main.c b/kpayload/source/main.c
--- a/kpayload/source/main.c	(revision 8852b94cd3896f8a876dff1c980349ae737f625a)
+++ b/kpayload/source/main.c	(date 1751991602897)
@@ -89,8 +89,11 @@
 int (*sys_dynlib_load_prx)(void *param_1, void *param_2) PAYLOAD_BSS;
 int (*sys_dynlib_dlsym)(void *param_1, void *param_2) PAYLOAD_BSS;

+int (*scan_phdr)(struct image_params* p_ImageParams, struct elf64_phdr* p_ProgramHeaders, uint64_t p_ProgramHeaderCount, uint32_t* p_TextSizeFlag) PAYLOAD_BSS;
+
 // initialization, etc
 extern void install_fself_hooks(void) PAYLOAD_CODE;
+extern void install_tls_hooks(void) PAYLOAD_CODE;
 extern void install_fpkg_hooks(void) PAYLOAD_CODE;
 extern void install_patches(void) PAYLOAD_CODE;
 extern void install_syscall_hooks(void) PAYLOAD_CODE;
@@ -157,6 +160,9 @@
   resolve(vm_map_lock_read);
   resolve(vm_map_unlock_read);
   resolve(vm_map_lookup_entry);
+
+  // Thread local storage patch
+  resolve(scan_phdr);
 }

 PAYLOAD_CODE int my_hex_to_int(char c) {
@@ -345,6 +351,28 @@
   writeCr0(cr0);
 }

+PAYLOAD_CODE int my_scan_phdr(struct image_params* p_ImageParams, struct elf64_phdr* p_ProgramHeaders, uint64_t p_ProgramHeaderCount, uint32_t* p_TextSizeFlag) {
+    int ret = scan_phdr(p_ImageParams, p_ProgramHeaders, p_ProgramHeaderCount, p_TextSizeFlag);
+    if (p_ImageParams != NULL && p_ImageParams->tls_addr != 0 && p_ImageParams->tls_mem_size != 0) {
+        p_ImageParams->tls_mem_size += 0x20;
+    }
+    return ret;
+}
+
+PAYLOAD_CODE void install_tls_hooks() {
+    uint64_t flags, cr0;
+    uint64_t kernbase = getkernbase(fw_offsets->XFAST_SYSCALL_addr);
+
+    cr0 = readCr0();
+    writeCr0(cr0 & ~X86_CR0_WP);
+    flags = intr_disable();
+
+    KCALL_REL32(kernbase, fw_offsets->exec_self_imgact_scan_phdr_addr_hook, (uint64_t)my_scan_phdr);
+
+    intr_restore(flags);
+    writeCr0(cr0);
+}
+
 PAYLOAD_CODE int my_entrypoint(uint16_t fw_version_arg, struct configuration config_arg) {
   fw_version = fw_version_arg;
   fw_offsets = get_offsets_for_fw(fw_version);
@@ -356,6 +384,7 @@
   printf("Hello from KPayload: %i\n", fw_version);
   install_fself_hooks();
   install_fpkg_hooks();
+  install_tls_hooks();
   if (!config.skip_patches) {
     install_patches();
   }
@@ -379,3 +408,4 @@
 int _start() {
   return 0;
 }
+


